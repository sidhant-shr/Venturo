{
  "components": {
    "frontend/widget/node_modules.react-visibility-sensor.example": {
      "code": "<VisibilitySensor partialVisibility>\n  {({ isVisible, Once }) => (\n  <DetailContainer>\n    <DetailTitle>{detail.title}</DetailTitle>\n    <Markdown>{detail.description}</Markdown>\n    { isVisible\n      ? (\n          <MediaContainer>\n            {\n              detail.media.map(src => (\n              <Video playsInline muted loop autoPlay preload=\"metadata\" key={src} controls>\n                <source src={`${src}#t=0.1`} />\n              </Video>\n              ))\n            }\n          </MediaContainer>\n        )\n      : <span />\n    }\n  </DetailContainer>\n</VisibilitySensor>\n"
    },
    "frontend/widget/node_modules.react-visibility-sensor.tests.visibility-sensor-spec": {
      "code": "import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport assert from \"assert\";\nimport VisibilitySensor from \"../visibility-sensor\";\n\ndescribe(\"VisibilitySensor\", function() {\n  var node;\n\n  beforeEach(function() {\n    node = document.createElement(\"div\");\n    document.body.appendChild(node);\n  });\n\n  afterEach(function() {\n    ReactDOM.unmountComponentAtNode(node);\n    document.body.removeChild(node);\n  });\n\n  it(\"should notify of changes to visibility when parent moves\", function(\n    done\n  ) {\n    var firstTime = true;\n    var onChange = function(isVisible) {\n      // by default we expect the sensor to be visible\n      if (firstTime) {\n        firstTime = false;\n        assert.equal(isVisible, true, \"Component starts out visible\");\n        node.setAttribute(\n          \"style\",\n          \"position:absolute; width:100px; left:-101px\"\n        );\n      } else {\n        // after moving the sensor it should be not visible anymore\n        assert.equal(\n          isVisible,\n          false,\n          \"Component has moved out of the visible viewport\"\n        );\n        done();\n      }\n    };\n\n    var element = (\n      <VisibilitySensor onChange={onChange} intervalDelay={10}>\n        <div style={{ height: \"10px\", width: \"10px\" }} />\n      </VisibilitySensor>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should notify of changes to visibility when user scrolls\", function(\n    done\n  ) {\n    var firstTime = true;\n    var onChange = function(isVisible) {\n      // by default we expect the sensor to be visible\n      if (firstTime) {\n        firstTime = false;\n        assert.equal(isVisible, true, \"Component starts out visible\");\n\n        window.scrollTo(0, 1000);\n      } else {\n        // after moving the sensor it should be not visible anymore\n        assert.equal(\n          isVisible,\n          false,\n          \"Component has moved out of the visible viewport\"\n        );\n        done();\n      }\n    };\n\n    var element = (\n      <div style={{ height: \"5000px\" }}>\n        <VisibilitySensor\n          scrollCheck\n          scrollDelay={10}\n          onChange={onChange}\n          intervalCheck={false}\n        >\n          <div style={{ height: \"10px\", width: \"10px\" }} />\n        </VisibilitySensor>\n      </div>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should notify of changes to visibility when child moves\", function(done) {\n    var firstTime = true;\n    var initialStyle = {\n      height: \"10px\",\n      width: \"10px\"\n    };\n    var onChange = function(isVisible) {\n      // by default we expect the sensor to be visible\n      if (firstTime) {\n        firstTime = false;\n        assert.equal(isVisible, true, \"Component starts out visible\");\n        const style = {\n          position: \"absolute\",\n          width: 100,\n          left: -101\n        };\n        ReactDOM.render(getElement(style), node);\n      } else {\n        // after moving the sensor it should be not visible anymore\n        assert.equal(\n          isVisible,\n          false,\n          \"Component has moved out of the visible viewport\"\n        );\n        done();\n      }\n    };\n\n    // set interval must be one in order for this to work\n    function getElement(style) {\n      return (\n        <VisibilitySensor onChange={onChange} intervalDelay={10}>\n          <div style={style} />\n        </VisibilitySensor>\n      );\n    }\n\n    ReactDOM.render(getElement(initialStyle), node);\n  });\n\n  it(\"should notify of changes to visibility\", function(done) {\n    var onChange = function(isVisible) {\n      assert.equal(isVisible, true, \"Component starts out visible\");\n      done();\n    };\n\n    var element = (\n      <VisibilitySensor onChange={onChange}>\n        <div style={{ height: \"10px\", width: \"10px\" }} />\n      </VisibilitySensor>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should not notify when deactivated\", function(done) {\n    var wasCallbackCalled = false;\n    var onChange = function(isVisible) {\n      wasCallbackCalled = true;\n    };\n\n    setTimeout(function() {\n      assert(!wasCallbackCalled, \"onChange callback should not be called\");\n      done();\n    }, 20);\n\n    var element = (\n      <VisibilitySensor active={false} onChange={onChange} intervalDelay={10} />\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should clear interval and debounceCheck when deactivated\", function() {\n    var onChange = function() {};\n\n    var element1 = (\n      <VisibilitySensor\n        active={true}\n        onChange={onChange}\n        scrollCheck\n        resizeCheck\n      />\n    );\n\n    var element2 = (\n      <VisibilitySensor\n        active={false}\n        onChange={onChange}\n        scrollCheck\n        resizeCheck\n      />\n    );\n\n    var component1 = ReactDOM.render(element1, node);\n    assert(component1.interval, \"interval should be set\");\n    assert(component1.debounceCheck, \"debounceCheck should be set\");\n    assert(\n      component1.debounceCheck.scroll,\n      \"debounceCheck.scroll should be set\"\n    );\n    assert(\n      component1.debounceCheck.resize,\n      \"debounceCheck.scroll should be set\"\n    );\n\n    var component2 = ReactDOM.render(element2, node);\n    assert(!component2.interval, \"interval should not be set\");\n    assert(!component2.debounceCheck, \"debounceCheck should not be set\");\n  });\n\n  it(\"should work when using offset prop and moving to outside of offset area\", function(\n    done\n  ) {\n    var firstTime = true;\n    node.setAttribute(\"style\", \"position:absolute; top:51px\");\n    var onChange = function(isVisible) {\n      if (firstTime) {\n        firstTime = false;\n        assert.equal(isVisible, true, \"Component starts out visible\");\n        node.setAttribute(\"style\", \"position:absolute; top:49px\");\n      } else {\n        assert.equal(\n          isVisible,\n          false,\n          \"Component has moved out of offset area\"\n        );\n        done();\n      }\n    };\n\n    var element = (\n      <VisibilitySensor\n        onChange={onChange}\n        offset={{ top: 50 }}\n        intervalDelay={10}\n      >\n        <div style={{ height: \"10px\", width: \"10px\" }} />\n      </VisibilitySensor>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should be backwards-compatible with old offset config\", function(done) {\n    var firstTime = true;\n    node.setAttribute(\"style\", \"position:absolute; top:51px\");\n    var onChange = function(isVisible) {\n      if (firstTime) {\n        firstTime = false;\n        assert.equal(isVisible, true, \"Component starts out visible\");\n        node.setAttribute(\"style\", \"position:absolute; top:49px\");\n      } else {\n        assert.equal(\n          isVisible,\n          false,\n          \"Component has moved out of offset area\"\n        );\n        done();\n      }\n    };\n\n    var element = (\n      <VisibilitySensor\n        onChange={onChange}\n        offset={{ direction: \"top\", value: 50 }}\n        intervalDelay={10}\n      >\n        <div style={{ height: \"10px\", width: \"10px\" }} />\n      </VisibilitySensor>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should work when using offset prop and moving to inside of offset area\", function(\n    done\n  ) {\n    var firstTime = true;\n    node.setAttribute(\"style\", \"position:absolute; top:49px\");\n    var onChange = function(isVisible) {\n      if (firstTime) {\n        firstTime = false;\n        assert.equal(isVisible, false, \"Component starts out invisible\");\n        node.setAttribute(\"style\", \"position:absolute; top:51px\");\n      } else {\n        assert.equal(\n          isVisible,\n          true,\n          \"Component has moved inside of offset area\"\n        );\n        done();\n      }\n    };\n\n    var element = (\n      <VisibilitySensor\n        onChange={onChange}\n        offset={{ top: 50 }}\n        intervalDelay={10}\n      >\n        <div style={{ height: \"10px\", width: \"10px\" }} />\n      </VisibilitySensor>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should work when using negative offset prop and moving to outside of viewport\", function(\n    done\n  ) {\n    var firstTime = true;\n    node.setAttribute(\"style\", \"position:absolute; top:-49px\");\n    var onChange = function(isVisible) {\n      if (firstTime) {\n        firstTime = false;\n        assert.equal(isVisible, true, \"Component starts out visible\");\n        node.setAttribute(\"style\", \"position:absolute; top:-51px\");\n      } else {\n        assert.equal(\n          isVisible,\n          false,\n          \"Component has moved outside of viewport and visible area\"\n        );\n        done();\n      }\n    };\n\n    var element = (\n      <VisibilitySensor\n        onChange={onChange}\n        offset={{ top: -50 }}\n        intervalDelay={10}\n      >\n        <div style={{ height: \"10px\", width: \"10px\" }} />\n      </VisibilitySensor>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should call child function with state\", function(done) {\n    var wasChildrenCalled = false;\n    var children = function(props) {\n      wasChildrenCalled = true;\n      assert(\n        \"isVisible\" in props,\n        \"children should be called with isVisible prop\"\n      );\n      assert(\n        \"visibilityRect\" in props,\n        \"children should be called with visibilityRect prop\"\n      );\n      return <div />;\n    };\n\n    setTimeout(function() {\n      assert(wasChildrenCalled, \"children should be called\");\n      done();\n    }, 200);\n\n    var element = <VisibilitySensor>{children}</VisibilitySensor>;\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should not return visible if it has no size\", function(done) {\n    var firstTime = true;\n    var onChange = function(isVisible) {\n      if (firstTime) {\n        assert.equal(isVisible, false, \"Component is not visible\");\n        done();\n      }\n    };\n\n    var element = (\n      <VisibilitySensor onChange={onChange}>\n        <div style={{ height: \"0px\", width: \"0px\" }} />\n      </VisibilitySensor>\n    );\n\n    ReactDOM.render(element, node);\n  });\n\n  it(\"should not return visible if the sensor is hidden\", function(done) {\n    var firstTime = true;\n    var onChange = function(isVisible) {\n      if (firstTime) {\n        assert.equal(isVisible, false, \"Component is not visible\");\n        done();\n      }\n    };\n\n    var element = (\n      <div style={{ display: \"none\" }}>\n        <VisibilitySensor onChange={onChange}>\n          <div style={{ height: \"10px\", width: \"10px\" }} />\n        </VisibilitySensor>\n      </div>\n    );\n\n    ReactDOM.render(element, node);\n  });\n});\n"
    }
  }
}